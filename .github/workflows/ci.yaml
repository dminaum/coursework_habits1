name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install deps
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run flake8
        run: poetry run flake8 .

  tests:
    runs-on: ubuntu-latest
    env:
      USE_SQLITE_FOR_TESTS: "1"
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install deps
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests
        run: |
          poetry run pytest
  deploy:
    runs-on: ubuntu-latest
    needs: [tests, lint]

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Ensure deploy dir exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "mkdir -p ${{ secrets.DEPLOY_DIR }}"

      - name: Copy project files to server (no owner/group preserve)
        run: |
          rsync -rlvz \
            --exclude '__pycache__' \
            --exclude '.git' \
            --exclude '.venv' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}/

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            docker compose up --force-recreate -d