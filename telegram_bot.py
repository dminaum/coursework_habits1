from dotenv import load_dotenv
import os
import django

import re
from datetime import time as dt_time

import telebot
from django.contrib.auth import get_user_model
from django.utils import timezone
from telebot import types

from habits.models import Habit
from habits.serializers import HabitSerializer

load_dotenv()

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()


User = get_user_model()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

STATE: dict[int, dict] = {}


def get_or_create_user_by_chat(chat_id: int) -> User:
    user, created = User.objects.get_or_create(
        username=str(chat_id), defaults={"telegram_chat_id": chat_id}
    )
    if not created and getattr(user, "telegram_chat_id", None) != chat_id:
        user.telegram_chat_id = chat_id
        user.save(update_fields=["telegram_chat_id"])
    return user


def parse_hhmm(value: str) -> dt_time | None:
    m = re.fullmatch(r"\s*(\d{1,2}):(\d{2})\s*", value)
    if not m:
        return None
    hh, mm = int(m.group(1)), int(m.group(2))
    if 0 <= hh <= 23 and 0 <= mm <= 59:
        return dt_time(hour=hh, minute=mm)
    return None


def validate_periodicity(s: str) -> int | None:
    try:
        v = int(s)
    except ValueError:
        return None
    if 1 <= v <= 7:
        return v
    return None


def validate_duration(s: str) -> int | None:
    try:
        v = int(s)
    except ValueError:
        return None
    if 1 <= v <= 120:
        return v
    return None


def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    kb.add(
        types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏"),
    )
    return kb


def list_habits_text(user: User) -> tuple[str, list[Habit]]:
    habits = list(Habit.objects.filter(user=user).order_by("time", "id"))
    if not habits:
        return "ü§∑‚Äç‚ôÄÔ∏è –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", []
    lines = [f"üìÉ –ü–†–û–í–ï–†–ö–ê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email or user.username}:\n"]
    for h in habits:
        reward_txt = h.reward if h.reward else "–ù–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"
        kind = "–ø—Ä–∏—è—Ç–Ω–∞—è" if h.is_pleasant else "–ø–æ–ª–µ–∑–Ω–∞—è"
        lines += [
            f"<b>{h.id}. {h.action}</b> ({kind})",
            f"üïê –≤—Ä–µ–º—è: {h.time.strftime('%H:%M')}",
            f"üó∫ –º–µ—Å—Ç–æ: {h.place}",
            f"üîÅ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: —Ä–∞–∑ –≤ {h.periodicity_days} –¥–Ω.",
            f"‚è± –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~{h.duration_seconds} —Å–µ–∫.",
            f"üéÅ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward_txt}",
            f"üëÅ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å: {'–¥–∞' if h.is_public else '–Ω–µ—Ç'}",
            "",
        ]
    return "\n".join(lines), habits


def habit_inline_kb(h: Habit) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(
            "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"done:{h.id}"
        )
    )
    return kb


def clear_state(chat_id: int):
    STATE.pop(chat_id, None)


@bot.message_handler(commands=["start", "help"])
def handle_start(message: types.Message):
    get_or_create_user_by_chat(message.chat.id)
    clear_state(message.chat.id)
    bot.reply_to(
        message,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –≤–∞—à —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö")
def handle_info(message: types.Message):
    user = get_or_create_user_by_chat(message.chat.id)
    text, habits = list_habits_text(user)
    bot.reply_to(message, text)
    for h in habits[:10]:
        msg = f"üéØ <b>{h.action}</b> @ {h.time.strftime('%H:%M')} ‚Ä¢ {h.place}"
        bot.send_message(message.chat.id, msg, reply_markup=habit_inline_kb(h))


@bot.message_handler(func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏")
def handle_delete_all(message: types.Message):
    user = get_or_create_user_by_chat(message.chat.id)
    Habit.objects.filter(user=user).delete()
    bot.reply_to(message, "üóë –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_menu_keyboard())


@bot.message_handler(func=lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
def handle_add_habit(message: types.Message):
    STATE[message.chat.id] = {"step": "action", "data": {}}
    bot.reply_to(message, "üéØ –í–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ (—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å):")


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("done:"))
def handle_done_callback(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    user = get_or_create_user_by_chat(chat_id)
    try:
        hid = int(call.data.split(":", 1)[1])
        h = Habit.objects.get(id=hid, user=user)
    except Exception:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å ID.")
        return
    h.last_performed_at = timezone.now()
    h.save(update_fields=["last_performed_at"])
    bot.answer_callback_query(call.id, "–û—Ç–º–µ—á–µ–Ω–æ! üí™")
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)


@bot.message_handler(regexp=r"^/done_\d+$")
def handle_done_command(message: types.Message):
    chat_id = message.chat.id
    user = get_or_create_user_by_chat(chat_id)
    try:
        hid = int(message.text.split("_", 1)[1])
        h = Habit.objects.get(id=hid, user=user)
    except Exception:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å ID.")
        return
    h.last_performed_at = timezone.now()
    h.save(update_fields=["last_performed_at"])
    bot.reply_to(message, "–û—Ç–º–µ—á–µ–Ω–æ! üí™")


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "action")
def step_action(message: types.Message):
    data = STATE[message.chat.id]["data"]
    text = (message.text or "").strip()
    if not text:
        bot.reply_to(message, "–ü—É—Å—Ç–æ. –í–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë —Ä–∞–∑:")
        return
    data["action"] = text
    STATE[message.chat.id]["step"] = "time"
    bot.reply_to(message, "üïê –í–æ —Å–∫–æ–ª—å–∫–æ? –§–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "time")
def step_time(message: types.Message):
    data = STATE[message.chat.id]["data"]
    t = parse_hhmm((message.text or "").strip())
    if not t:
        bot.reply_to(
            message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):"
        )
        return
    data["time"] = t.strftime("%H:%M")
    STATE[message.chat.id]["step"] = "place"
    bot.reply_to(message, "üó∫ –ì–¥–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å? (–∫—Ä–∞—Ç–∫–æ):")


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "place")
def step_place(message: types.Message):
    data = STATE[message.chat.id]["data"]
    text = (message.text or "").strip()
    if not text:
        bot.reply_to(message, "–ü—É—Å—Ç–æ. –£–∫–∞–∂–∏ –º–µ—Å—Ç–æ –µ—â—ë —Ä–∞–∑:")
        return
    data["place"] = text
    kb = types.ReplyKeyboardMarkup(
        row_width=2, resize_keyboard=True, one_time_keyboard=True
    )
    kb.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
    STATE[message.chat.id]["step"] = "pleasant"
    bot.reply_to(message, "–≠—Ç–æ –ø—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb)


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "pleasant")
def step_pleasant(message: types.Message):
    data = STATE[message.chat.id]["data"]
    yes = (message.text or "").strip().lower().startswith("–¥")
    data["is_pleasant"] = yes
    if yes:
        data["reward"] = None
        STATE[message.chat.id]["step"] = "periodicity"
        bot.reply_to(
            message,
            "üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ 1‚Äì7 –¥–Ω–µ–π):",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    else:
        STATE[message.chat.id]["step"] = "reward"
        bot.reply_to(
            message,
            "üéÅ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):",
            reply_markup=types.ReplyKeyboardRemove(),
        )


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "reward")
def step_reward(message: types.Message):
    data = STATE[message.chat.id]["data"]
    text = (message.text or "").strip()
    data["reward"] = None if text.lower() == "–Ω–µ—Ç" else text
    STATE[message.chat.id]["step"] = "periodicity"
    bot.reply_to(message, "üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ 1‚Äì7 –¥–Ω–µ–π):")


@bot.message_handler(
    func=lambda m: STATE.get(m.chat.id, {}).get("step") == "periodicity"
)
def step_periodicity(message: types.Message):
    data = STATE[message.chat.id]["data"]
    v = validate_periodicity((message.text or "").strip())
    if v is None:
        bot.reply_to(message, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return
    data["periodicity_days"] = v
    STATE[message.chat.id]["step"] = "duration"
    bot.reply_to(message, "‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã, 1‚Äì120):")


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "duration")
def step_duration(message: types.Message):
    data = STATE[message.chat.id]["data"]
    v = validate_duration((message.text or "").strip())
    if v is None:
        bot.reply_to(message, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return
    data["duration_seconds"] = v
    kb = types.ReplyKeyboardMarkup(
        row_width=2, resize_keyboard=True, one_time_keyboard=True
    )
    kb.add(types.KeyboardButton("–ü—É–±–ª–∏—á–Ω–∞—è"), types.KeyboardButton("–ü—Ä–∏–≤–∞—Ç–Ω–∞—è"))
    STATE[message.chat.id]["step"] = "public"
    bot.reply_to(message, "–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø—É–±–ª–∏—á–Ω–æ–π?", reply_markup=kb)


@bot.message_handler(func=lambda m: STATE.get(m.chat.id, {}).get("step") == "public")
def step_public(message: types.Message):
    data = STATE[message.chat.id]["data"]
    is_public = (message.text or "").strip().lower().startswith("–ø—É–±")
    data["is_public"] = is_public

    user = get_or_create_user_by_chat(message.chat.id)
    serializer = HabitSerializer(data=data, context={"user": user})
    if serializer.is_valid():
        serializer.save()
        bot.reply_to(
            message,
            "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üéØ {data['action']} @ {data['time']} ‚Ä¢ {data['place']}",
            reply_markup=main_menu_keyboard(),
        )
        clear_state(message.chat.id)
    else:
        err = serializer.errors
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {err}", reply_markup=main_menu_keyboard())
        clear_state(message.chat.id)


@bot.message_handler(func=lambda m: True)
def fallback(message: types.Message):
    st = STATE.get(message.chat.id)
    if st and st.get("step"):
        bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.")
        return
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


if __name__ == "__main__":
    if not BOT_TOKEN:
        raise SystemExit("BOT_TOKEN/TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    bot.infinity_polling(skip_pending=True)
